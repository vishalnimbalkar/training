// npm 
// Q.what is npm?
// npm is package manager for NodeJS.
// it is used to :
// - install packages and libraries
// - manage dependencies 
//  npm keep track of projects packages in package.json File
// - running script 
// - publish libraries
//  developers can publish their own packages on npm registry
//  - version control 
//   npm allows to control specific version of packages in project.
// ex: toaster

// # installing packages
// we can install packages by 2 ways 
// 1.local
// package is available for only perticular project
// Stored inside the node_modules/ directory of your project.
// syntax - npm install <package_name> or npm i <package_name>
// ex - npm install express or npm i express

// 2.global
// packages are available for all projects
// syntax - npm install -g <package_name>

// # package.json file 
// It contains metadata about the project and records all dependencies, scripts, and configuration.

// creating package.json
// - npm init 
// above command creates package.json  file
// - npm init -y 
// this command skip prompts 
console.log('hello')

// fields in package.json file 
// 1.name - The name of project(must be in lowecase, no spaces )
// 2.version - The current version of project using sementic versioning(major.minor.patch)
// 3.description - A short summary about project 
// 4.main - The entry point js file ex: index.js or app.js

// 5.scripts
// "start" : "node index.js" - start app using nodejs. 'npm start' automatically runs this.

// "dev" : "nodemon index.js" - starts the app with nodemon. 'npm run rev'

// "test": "echo \"Error: no test specified\" && exit 1" - used for testing 

// 6.dependencies
// list of packages app needs 
// "dependencies": {
//   "express": "^4.18.2"
// }
// "express" - package name 
// "^4.18.2" - package version
// version symbols 
// '^' - allow update that don't change the first digit (minor/patch updates)
// '~' - allow update that don't change the middle digit (patch updates only)
//  no symbol - exact version only 

// --save-dev
// this command adds packages in devdependencies

// package used during development added into devDependencies

// # package-lock.json
// file is created when we add packages in package.json file 
// also node_modules folder is created at that time 
// It locks the exact version of all installed packages, including nested dependencies.

// it is auto generated by npm we cannot edit this file 

// installing specific version 
// syntax - npm install <package_name>@latest

// #uninstalling Packages 

// local 
// syntax - npm uninstall <package_name>
// this will: 
// -Remove the package from node_modules
// -Remove it from dependencies in package.json
// -Update package-lock.json

// global
// syntax - npm uninstall -g <package_name>
// this will:
// - removes package folder from global node_modules.

// npm list 
// gives list of installed packages in the current project 

// npm list -g 
// gives list of globally installed packages  

// npm outdated
// gives list of updated packages 

// npm update 
// It updates the packages to the latest version based on the version range specified in your package.json. For example, if your package.json lists a dependency like "express": "^4.16.0", running npm update will update express to the latest version compatible with 4.x.x, but not to 5.x.x.

// npm cache clean --force	
// Clears the npm cache.

// npm prune	
// Removes packages not listed in package.json.

// imp
// dependencies vs devDependencies
// npm i without package.json gives error
// repl 

// version symbols 
// Here’s a full list of common version symbols and what they mean:

// 🔹 1. ^ (Caret)
// Most common in dependencies.

// Allows updates that do not change the first non-zero digit.

// Example:

// "express": "^4.18.2"
// ✅ Accepts: 4.19.0, 4.20.1, etc.
// ❌ Rejects: 5.0.0 (major version bump)

// 🔹 2. ~ (Tilde)
// Allows patch-level changes only (last digit).

// Example:

// "express": "~4.18.2"
// ✅ Accepts: 4.18.3, 4.18.9, etc.
// ❌ Rejects: 4.19.0, 5.0.0

// 🔹 3. * (Wildcard)
// Matches any version (use with caution).

// Example:

// "express": "*"
// ✅ Accepts: Any version (even major changes).

// 🔹 4. No Symbol (Exact version)
// Installs only that exact version.

// Example:

// "express": "4.18.2"
// ✅ Accepts: Only 4.18.2
// ❌ Rejects: 4.18.3, 4.19.0

// 🔹 5. > / >= / < / <= (Comparison Operators)
// Sets minimum or range boundaries.

// Examples:

// "express": ">4.17.0"
// "express": ">=4.18.0"
// "express": "<5.0.0"
// "express": ">=4.18.0 <5.0.0"
// ✅ Useful for specifying a range of acceptable versions.

// 🔹 6. latest
// Always installs the most recent published version.

// npm install express@latest
// ✅ Summary Table
// Symbol	Meaning	Example	Acceptable Versions
// ^	Minor and patch updates	^1.2.3	1.2.4, 1.3.0, 1.9.x
// ~	Patch updates only	~1.2.3	1.2.4, 1.2.9
// *	Any version	*	All
// (none)	Exact version only	1.2.3	Only 1.2.3
// >=, <	Range comparisons	>=1.2.0 <2.0.0	1.2.0, 1.3.4